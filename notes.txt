1.3) Évaluation des atomes

- lookup : variable * environnement -> valeur

(lookup (symbol->variable exp) env)) ;; entité syntaxique -> entité sémantique
(lookup (variable->key (symbol->variable exp)) env)) ;; si une variable est un concept imaginaire
(lookup exp env) ;; la clé est le symbole de même nom

- autoquote : un objet autoquoté n'a pas besoin d'être évalué et a
  pour valeur lui-même. (nombre, chaîne, caractère, booléen ...)

- forme spéciale : liste dont le premier terme est un symbole
  particulier (keyword)

1.4) Évaluation des formes

- quote, if, begin, set!, lambda

1.4.1) Citation
- citation : M-expression en Lisp (1960-1978)
- quote : est le discriminateur entre programme et donnée.
- citation implicite/explicite : #(fa do sol) et '#(fa do sol)

1.4.2) Alternative
- (define the-false-value (cons "false" "boolean"))
- En Scheme, #f est différent de ()
- En Lisp,  #f = () = NIL

1.4.3) Séquence (begin, progn)
- (define empty-begin 813) La séquence n'a pas d'intérêt si le langage
  est purement fonctionnel, sauf pour ralentir un programme (jeu vidéo).
- (if a bb) = (begin a b)
- (begin a b) = ((lambbda () b) a) (Call by value)

1.4.4) Affectation
- la nouvelle valeur est calculée puis devient la valeur de la variable.

1.4.5) Abstraction
- liste des variables, corps de la fonction, environnement

1.4.6) Application fonctionnelle (combinaison)
- mono-valeur : un seul espace de nom
- ordre d'évaluation : défini dans "evlis"

1.5) Représentation de l'environnement

- liste d'associations ou A-liste (variable * valeur)
- Les variables sont représentés par les symboles de même nom.
- en mode autoquote la valeur d'une variable inconnue est le symbole.
- l'erreur est un garde-fou
- set! peut retourner la valeur, l'ancienne ou un objet représentant 
  ce qui n'est pas spécifié.

1.6) Représentation des fonctions

- Scheme : n'impose pas un ordre d'évaluation
- Common Lisp : évaluation gauche-droite

- évaluation d'une application
  - fonction, argument, arité + application
  - fonction, argument + arité, application

- environnement d'évaluation :
  - env.init : trop limité
  - env.global : exclu des variables
  - env.current : exclu des variables
  - env.def : OK
- fermeture = abstraction + env.def

1.6.1) Liaison dynamique et lexicale
- liaison dynamique : POO, méthode appelé est lié à l'exécution.
- liaison lexical : trait des langages fonctionnel d'ordre supérieur.
- portée : zone de texte où une variable est accessible.
- Scheme : lexical, Common Lisp : lexical + dynamique
- Algol 60 : blocs emboités
- lexical : meilleure performance car l'emplacement de la variable
  est connu à la compilation
- variable spéciale : dynamique, (declare (special x)) (Lisp 1.5,
  MacLisp, Common Lisp)
- transparence référentielle : propriété que possède un langage quand
  la substitution d'une expression par une autre équivalente ne
  modifie pas le programme.

1.6.2) Implantation superficielle ou profonde
- deep binding : lookup a une compléxité en O(n)
- shallow binding : à chaque variable est associé un endroit où est
  stocké sa valeur, indépendamment de l'environnement courant.
  problème : à chaque appel il faut sauver les anciennes valeurs puis
  les restaurer.

vocabulaire : variable libre, variable liée, environnement, forme
